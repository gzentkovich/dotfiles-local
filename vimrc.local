colorscheme colorsbox-stnight
let g:airline_theme="raven"
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

" set line spacing in Terminal Fonts Dialog to 0.943
set guifont=Andale\ Mono\ for\ Powerline:h14
set background=dark

" non-standard, but very quick moment between modes.
map ; :
imap jk <Esc>
set noshowmode

" need to set highlight colorcolumn now, or the default
" red color from the .vimrc base file will display.
" this is a muted black color
highlight colorcolumn ctermbg=234 guibg=#1c1c1c

" set textwidth to n and set colorcolumn from n and beyond (relative) 
" to a lighter color, easier on the eyes.
"
set textwidth=80
execute "set colorcolumn=" . join(map(range(2,259), '"+" . v:val'), ',')

" vim-powerline symbols
let g:airline_left_sep          = '⮀'
let g:airline_left_alt_sep      = '⮁'
let g:airline_right_sep         = '⮂'
let g:airline_right_alt_sep     = '⮃'
let g:airline_symbols.branch    = '⭠'
let g:airline_symbols.readonly  = '⭤'
let g:airline_symbols.linenr    = '⭡'

" airline tomato config
let g:airline_powerline_fonts = 1
let g:tomato#interval = 20 * 60
let g:tomato#rest_time = 5 * 60
let g:tomato#remind = " \uf003 "
let g:tomato#restinfo = " \ue1f1 "
let g:tomato#show_clock = 1
let g:tomato#show_count_down = 1

" fix hiding double quotes in json files by default
let g:vim_json_syntax_conceal = 0
"set conceallevel=0

" vertical line indentation
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#09AA08'
let g:indentLine_char = '|'

" set your tab preference
set tabstop=2 softtabstop=2 shiftwidth=2

" set hybrid line number mode
set relativenumber
set number

" no byte-order marks (BOM)
set nobomb

let g:rspec_command = "!rspec --drb {spec}"
let g:rspec_command = "Dispatch rspec {spec}"

let g:snipMate = {}
let g:snipMate.scope_aliases = {}
let g:snipMate.scope_aliases['ruby'] = 'ruby,rails'

" toggle between paste (ctrl-v) nopaste
set pastetoggle=<F2>

" search configs
set incsearch
set hlsearch
nmap <leader>h :nohlsearch<cr>
set ignorecase
set smartcase

" window splits configs i.e. focused windows expands
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999

" Run a cucumber scenario or rspec spec
function RunCurrentTest()
  execute "!" . CorrectTestRunner() "--drb" expand('%:p')
endfunction

function RunCurrentLineInTest()
  execute "!" . CorrectTestRunner() "--drb" expand('%:p') . ":" . line(".")
endfunction

function CorrectTestRunner()
  if match(expand('%'), '\.feature$') != -1
    return "cucumber"
  elseif match(expand('%'), '_spec\.rb$') != -1
    return "rspec"
  endif
endfunction

" get URL from line
function ExtractUrlFromCurrentLine()
  return matchstr(getline("."), "http[^ ]*")
endfunction

function! OpenUrlOnCurrentLineInBrowser()
  let url = ExtractUrlFromCurrentLine()
  exec "!open" url
endfunction

" call function above to open a URL on a line
" in your browser 
map <leader>ra :call RunCurrentLineInTest()<cr>
map <leader>rt :call RunCurrentLineInTest()<cr>
map <leader>vs :VtrSendCommandToRunner<cr>
map <leader>va :VtrAttachToPane<cr>

" turn syntastic off for HTML
" now must explicitly call it :SyntasticCheck
let syntastic_mode_map = { 'passive_filetypes': ['html'] }

" disable the trailing whitespace warning
let g:airline#extensions#whitespace#enabled = 0


let g:SimylFold_docstring_preview=1

" experimenting (added 1/23/2016
set cursorline    " highlight current line
set wildmenu      " visual autocomplete for command menu
set lazyredraw    " redraw only when needed
set showmatch     " highlight matching [{()}]
nnoremap j gj
nnoremap k gk
nnoremap B ^
nnoremap E $
nnoremap $ <nop>
nnoremap ^ <nop>
nnoremap gV `[v`]

